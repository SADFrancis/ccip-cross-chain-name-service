/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  MockERC20,
  MockERC20Interface,
} from "../../../forge-std/mocks/MockERC20";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [],
    name: "DOMAIN_SEPARATOR",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "name_",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol_",
        type: "string",
      },
      {
        internalType: "uint8",
        name: "decimals_",
        type: "uint8",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "nonces",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256",
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8",
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32",
      },
    ],
    name: "permit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50611e04806100206000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80633644e5151161008c57806395d89b411161006657806395d89b4114610228578063a9059cbb14610246578063d505accf14610276578063dd62ed3e14610292576100cf565b80633644e515146101aa57806370a08231146101c85780637ecebe00146101f8576100cf565b806306fdde03146100d4578063095ea7b3146100f25780631624f6c61461012257806318160ddd1461013e57806323b872dd1461015c578063313ce5671461018c575b600080fd5b6100dc6102c2565b6040516100e99190611006565b60405180910390f35b61010c600480360381019061010791906110d0565b610354565b604051610119919061112b565b60405180910390f35b61013c600480360381019061013791906112b4565b610446565b005b61014661050d565b604051610153919061134e565b60405180910390f35b61017660048036038101906101719190611369565b610517565b604051610183919061112b565b60405180910390f35b6101946107b6565b6040516101a191906113cb565b60405180910390f35b6101b26107cd565b6040516101bf91906113ff565b60405180910390f35b6101e260048036038101906101dd919061141a565b6107f5565b6040516101ef919061134e565b60405180910390f35b610212600480360381019061020d919061141a565b61083e565b60405161021f919061134e565b60405180910390f35b610230610856565b60405161023d9190611006565b60405180910390f35b610260600480360381019061025b91906110d0565b6108e8565b60405161026d919061112b565b60405180910390f35b610290600480360381019061028b9190611473565b610a71565b005b6102ac60048036038101906102a79190611515565b610d70565b6040516102b9919061134e565b60405180910390f35b6060600080546102d190611584565b80601f01602080910402602001604051908101604052809291908181526020018280546102fd90611584565b801561034a5780601f1061031f5761010080835404028352916020019161034a565b820191906000526020600020905b81548152906001019060200180831161032d57829003601f168201915b5050505050905090565b600081600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92584604051610434919061134e565b60405180910390a36001905092915050565b600960009054906101000a900460ff1615610496576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161048d90611601565b60405180910390fd5b82600090816104a591906117cd565b5081600190816104b591906117cd565b5080600260006101000a81548160ff021916908360ff1602179055506104d9610df7565b6006819055506104e7610e1a565b6007819055506001600960006101000a81548160ff021916908315150217905550505050565b6000600354905090565b600080600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600019811461062d576105ac8184610ead565b600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b610676600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205484610ead565b600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610702600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205484610f06565b600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040516107a2919061134e565b60405180910390a360019150509392505050565b6000600260009054906101000a900460ff16905090565b60006006546107da610df7565b146107ec576107e7610e1a565b6107f0565b6007545b905090565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60086020528060005260406000206000915090505481565b60606001805461086590611584565b80601f016020809104026020016040519081016040528092919081815260200182805461089190611584565b80156108de5780601f106108b3576101008083540402835291602001916108de565b820191906000526020600020905b8154815290600101906020018083116108c157829003601f168201915b5050505050905090565b6000610933600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483610ead565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506109bf600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483610f06565b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610a5f919061134e565b60405180910390a36001905092915050565b42841015610ab4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aab906118eb565b60405180910390fd5b60006001610ac06107cd565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98a8a8a600860008f73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815480929190610b349061193a565b919050558b604051602001610b4e96959493929190611991565b60405160208183030381529060405280519060200120604051602001610b75929190611a6a565b6040516020818303038152906040528051906020012085858560405160008152602001604052604051610bab9493929190611aa1565b6020604051602081039080840390855afa158015610bcd573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614158015610c4157508773ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b610c80576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c7790611b32565b60405180910390fd5b85600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508673ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92588604051610d5e919061134e565b60405180910390a35050505050505050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000610f6c610f649050610f6c819050610e138163ffffffff16565b9250505090565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6000604051610e4c9190611bf5565b60405180910390207fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6610e7d610df7565b30604051602001610e92959493929190611c0c565b60405160208183030381529060405280519060200120905090565b600081831015610ef2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ee990611cab565b60405180910390fd5b8183610efe9190611ccb565b905092915050565b6000808284610f159190611cff565b905083811015610f5a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f5190611d7f565b60405180910390fd5b8091505092915050565b600046905090565b610f74611d9f565b565b600081519050919050565b600082825260208201905092915050565b60005b83811015610fb0578082015181840152602081019050610f95565b60008484015250505050565b6000601f19601f8301169050919050565b6000610fd882610f76565b610fe28185610f81565b9350610ff2818560208601610f92565b610ffb81610fbc565b840191505092915050565b600060208201905081810360008301526110208184610fcd565b905092915050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006110678261103c565b9050919050565b6110778161105c565b811461108257600080fd5b50565b6000813590506110948161106e565b92915050565b6000819050919050565b6110ad8161109a565b81146110b857600080fd5b50565b6000813590506110ca816110a4565b92915050565b600080604083850312156110e7576110e6611032565b5b60006110f585828601611085565b9250506020611106858286016110bb565b9150509250929050565b60008115159050919050565b61112581611110565b82525050565b6000602082019050611140600083018461111c565b92915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61118882610fbc565b810181811067ffffffffffffffff821117156111a7576111a6611150565b5b80604052505050565b60006111ba611028565b90506111c6828261117f565b919050565b600067ffffffffffffffff8211156111e6576111e5611150565b5b6111ef82610fbc565b9050602081019050919050565b82818337600083830152505050565b600061121e611219846111cb565b6111b0565b90508281526020810184848401111561123a5761123961114b565b5b6112458482856111fc565b509392505050565b600082601f83011261126257611261611146565b5b813561127284826020860161120b565b91505092915050565b600060ff82169050919050565b6112918161127b565b811461129c57600080fd5b50565b6000813590506112ae81611288565b92915050565b6000806000606084860312156112cd576112cc611032565b5b600084013567ffffffffffffffff8111156112eb576112ea611037565b5b6112f78682870161124d565b935050602084013567ffffffffffffffff81111561131857611317611037565b5b6113248682870161124d565b92505060406113358682870161129f565b9150509250925092565b6113488161109a565b82525050565b6000602082019050611363600083018461133f565b92915050565b60008060006060848603121561138257611381611032565b5b600061139086828701611085565b93505060206113a186828701611085565b92505060406113b2868287016110bb565b9150509250925092565b6113c58161127b565b82525050565b60006020820190506113e060008301846113bc565b92915050565b6000819050919050565b6113f9816113e6565b82525050565b600060208201905061141460008301846113f0565b92915050565b6000602082840312156114305761142f611032565b5b600061143e84828501611085565b91505092915050565b611450816113e6565b811461145b57600080fd5b50565b60008135905061146d81611447565b92915050565b600080600080600080600060e0888a03121561149257611491611032565b5b60006114a08a828b01611085565b97505060206114b18a828b01611085565b96505060406114c28a828b016110bb565b95505060606114d38a828b016110bb565b94505060806114e48a828b0161129f565b93505060a06114f58a828b0161145e565b92505060c06115068a828b0161145e565b91505092959891949750929550565b6000806040838503121561152c5761152b611032565b5b600061153a85828601611085565b925050602061154b85828601611085565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061159c57607f821691505b6020821081036115af576115ae611555565b5b50919050565b7f414c52454144595f494e495449414c495a454400000000000000000000000000600082015250565b60006115eb601383610f81565b91506115f6826115b5565b602082019050919050565b6000602082019050818103600083015261161a816115de565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026116837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82611646565b61168d8683611646565b95508019841693508086168417925050509392505050565b6000819050919050565b60006116ca6116c56116c08461109a565b6116a5565b61109a565b9050919050565b6000819050919050565b6116e4836116af565b6116f86116f0826116d1565b848454611653565b825550505050565b600090565b61170d611700565b6117188184846116db565b505050565b5b8181101561173c57611731600082611705565b60018101905061171e565b5050565b601f8211156117815761175281611621565b61175b84611636565b8101602085101561176a578190505b61177e61177685611636565b83018261171d565b50505b505050565b600082821c905092915050565b60006117a460001984600802611786565b1980831691505092915050565b60006117bd8383611793565b9150826002028217905092915050565b6117d682610f76565b67ffffffffffffffff8111156117ef576117ee611150565b5b6117f98254611584565b611804828285611740565b600060209050601f8311600181146118375760008415611825578287015190505b61182f85826117b1565b865550611897565b601f19841661184586611621565b60005b8281101561186d57848901518255600182019150602085019450602081019050611848565b8683101561188a5784890151611886601f891682611793565b8355505b6001600288020188555050505b505050505050565b7f5045524d49545f444541444c494e455f45585049524544000000000000000000600082015250565b60006118d5601783610f81565b91506118e08261189f565b602082019050919050565b60006020820190508181036000830152611904816118c8565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006119458261109a565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036119775761197661190b565b5b600182019050919050565b61198b8161105c565b82525050565b600060c0820190506119a660008301896113f0565b6119b36020830188611982565b6119c06040830187611982565b6119cd606083018661133f565b6119da608083018561133f565b6119e760a083018461133f565b979650505050505050565b600081905092915050565b7f1901000000000000000000000000000000000000000000000000000000000000600082015250565b6000611a336002836119f2565b9150611a3e826119fd565b600282019050919050565b6000819050919050565b611a64611a5f826113e6565b611a49565b82525050565b6000611a7582611a26565b9150611a818285611a53565b602082019150611a918284611a53565b6020820191508190509392505050565b6000608082019050611ab660008301876113f0565b611ac360208301866113bc565b611ad060408301856113f0565b611add60608301846113f0565b95945050505050565b7f494e56414c49445f5349474e4552000000000000000000000000000000000000600082015250565b6000611b1c600e83610f81565b9150611b2782611ae6565b602082019050919050565b60006020820190508181036000830152611b4b81611b0f565b9050919050565b600081905092915050565b60008190508160005260206000209050919050565b60008154611b7f81611584565b611b898186611b52565b94506001821660008114611ba45760018114611bb957611bec565b60ff1983168652811515820286019350611bec565b611bc285611b5d565b60005b83811015611be457815481890152600182019150602081019050611bc5565b838801955050505b50505092915050565b6000611c018284611b72565b915081905092915050565b600060a082019050611c2160008301886113f0565b611c2e60208301876113f0565b611c3b60408301866113f0565b611c48606083018561133f565b611c556080830184611982565b9695505050505050565b7f45524332303a207375627472616374696f6e20756e646572666c6f7700000000600082015250565b6000611c95601c83610f81565b9150611ca082611c5f565b602082019050919050565b60006020820190508181036000830152611cc481611c88565b9050919050565b6000611cd68261109a565b9150611ce18361109a565b9250828203905081811115611cf957611cf861190b565b5b92915050565b6000611d0a8261109a565b9150611d158361109a565b9250828201905080821115611d2d57611d2c61190b565b5b92915050565b7f45524332303a206164646974696f6e206f766572666c6f770000000000000000600082015250565b6000611d69601883610f81565b9150611d7482611d33565b602082019050919050565b60006020820190508181036000830152611d9881611d5c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052605160045260246000fdfea2646970667358221220631a3c1e1ce860f5dfba2740a78a9059e1b00f91fd5a43de8d75594e33b70b6c64736f6c63430008130033";

type MockERC20ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockERC20ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockERC20__factory extends ContractFactory {
  constructor(...args: MockERC20ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockERC20> {
    return super.deploy(overrides || {}) as Promise<MockERC20>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockERC20 {
    return super.attach(address) as MockERC20;
  }
  override connect(signer: Signer): MockERC20__factory {
    return super.connect(signer) as MockERC20__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockERC20Interface {
    return new utils.Interface(_abi) as MockERC20Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockERC20 {
    return new Contract(address, _abi, signerOrProvider) as MockERC20;
  }
}
